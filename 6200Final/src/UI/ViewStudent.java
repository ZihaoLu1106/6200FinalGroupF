/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import DaysCare.FileUtil;
import DaysCare.Immunization.ImmunizationRecord;
import DaysCare.Immunization.RegistrationRecord;
import DaysCare.Organization.Classroom;
import DaysCare.Organization.Group;
import DaysCare.Person.Student;
import DaysCare.SingletonAdmin;
import java.awt.CardLayout;
import java.awt.Component;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author JANFAN
 */
public class ViewStudent extends javax.swing.JPanel {

    /**
     * Creates new form ViewStudent
     */
    JPanel workArea;
    SingletonAdmin admin;
    Student student;
    Group group;
    ViewStudent(JPanel workArea, SingletonAdmin admin, Student student,Group group) {
        initComponents();
        this.student=student;
        this.admin=admin;
        this.workArea=workArea;
        this.group=group;
        populate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblImmunizationRecord = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblGPA = new javax.swing.JLabel();
        btnTakeShot = new javax.swing.JButton();
        tblImmunizationRecord1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane2.setViewportView(tblImmunizationRecord1);

        //register button
        btnRegister = new javax.swing.JButton();
        btnRegister.setText("Register");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });



        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblImmunizationRecord.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String [] {
                        "Immunization", "Last Time", "Expire Date", "Status"
                }
        ));

        tblImmunizationRecord1.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null}
                },
                new String [] {
                        "Last Registration Time", "Next Registration Time", "Status"
                }
        ));
        jScrollPane1.setViewportView(tblImmunizationRecord);
        jScrollPane2.setViewportView(tblImmunizationRecord1);

        jLabel1.setText("Student' Information");

        jLabel4.setText("Name:");

        lblName.setText("jLabel5");

        jLabel2.setText("Age(Month):");

        lblAge.setText("jLabel5");

        jLabel3.setText("GPA:");

        lblGPA.setText("jLabel5");

        btnTakeShot.setText("Take Shot");
        btnTakeShot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTakeShotActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 678, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel3)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(lblGPA, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel2)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(lblAge, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                        .addComponent(jLabel4)
                                                        .addGap(57, 57, 57)
                                                        .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(btnTakeShot, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(btnBack)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 221, Short.MAX_VALUE)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(254, 254, 254))))
                                .addContainerGap(61, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnBack))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(lblName)
                                        .addComponent(btnTakeShot)
                                        .addComponent(btnRegister))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(lblAge))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(lblGPA))
                                .addContainerGap(158, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        workArea.remove(this);
        Component[] componentArray = workArea.getComponents();
        Component component = componentArray[componentArray.length - 1];
        ViewClass vc=(ViewClass)component;
        vc.populate(group);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.previous(workArea);
    }//GEN-LAST:event_btnBackActionPerformed

    //Action Listener for registration
    private void btnTakeShotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTakeShotActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblImmunizationRecord.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a Vaccine");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblImmunizationRecord.getModel();
        ImmunizationRecord i = (ImmunizationRecord) model.getValueAt(selectedRowIndex, 0);
        i.update();
        FileUtil.writeToFile(); // This will use the updated records to write to the file
        populate();
    }//GEN-LAST:event_btnTakeShotActionPerformed


    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {
        // Get the selected row in the registration table
        int selectedRowIndex = tblImmunizationRecord1.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a record to register.");
            return;
        }

        DefaultTableModel registrationModel = (DefaultTableModel) tblImmunizationRecord1.getModel();
        // Check if the selected record is already registered
        String status = (String) registrationModel.getValueAt(selectedRowIndex, 2);
        if ("Registered".equals(status)) {
            JOptionPane.showMessageDialog(this, "Already registered.");
            return;
        }

        // Update the status to "Registered"
        registrationModel.setValueAt("Registered", selectedRowIndex, 2);

        // Update the last registration date to today and next registration date to one year later
        LocalDate today = LocalDate.now();
        LocalDate nextYear = today.plusYears(1);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM-dd-yyyy");
        String lastRegistrationDate = today.format(formatter);
        String nextRegistrationDate = nextYear.format(formatter);

        // Get the student's registration record and update it
        RegistrationRecord registrationRecord = admin.getRegistrationMap().get(student);
        if (registrationRecord != null) {
            registrationRecord.updateRegistration(lastRegistrationDate, "Registered");
        }

        // Update the table to reflect the changes
        registrationModel.setValueAt(lastRegistrationDate, selectedRowIndex, 0); // Update last registration date
        registrationModel.setValueAt(nextRegistrationDate, selectedRowIndex, 1); // Update next registration date

        // Optionally, save the updated status to a file or database
        FileUtil.writeToFile(); // Call this to save the updated registration info to output.txt

        // Refresh the table to show updated status
        tblImmunizationRecord1.repaint();
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnTakeShot;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblGPA;
    private javax.swing.JLabel lblName;
    private javax.swing.JTable tblImmunizationRecord;
    private javax.swing.JTable tblImmunizationRecord1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton btnRegister;
    // End of variables declaration//GEN-END:variables

    // Method to find the earliest date
    private String getEarliestDate(List<String> dates) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM-dd-yyyy");
        return dates.stream()
                .map(date -> LocalDate.parse(date, formatter))
                .min(LocalDate::compareTo)
                .map(formatter::format)
                .orElse(""); // default if no date is found
    }

    // Method to calculate next registration date
    private String getNextRegistrationDate(String lastRegistrationDate) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM-dd-yyyy");
        LocalDate lastDate = LocalDate.parse(lastRegistrationDate, formatter);
        return lastDate.plusYears(1).format(formatter);
    }
    private void populate() {
        lblName.setText(student.getName());
        lblAge.setText(String.valueOf(student.getAge()));
        lblGPA.setText(String.valueOf(student.getGrade()));
        DefaultTableModel immunizationModel = (DefaultTableModel) tblImmunizationRecord.getModel();
        immunizationModel.setRowCount(0);

        // Assuming the student's immunization dates are stored in a list, get the earliest date
        List<String> immunizationDates = new ArrayList<>();

        for (ImmunizationRecord i: admin.getStudentMap().get(student)) {
            Object[] row = new Object[4];
            row[0] = i; // Update this getter method based on your actual method name
            row[1] = i.getDate();
            row[2] = i.getExpireDate();
            row[3] = i.isIsExpire() ? "Complete" : "Expired";
            immunizationModel.addRow(row);

            // Add the date to the list for later comparison
            immunizationDates.add(i.getDate());
        }

        // Now, immunizationDates is populated with actual dates
        String lastRegistrationTime = getEarliestDate(immunizationDates);

        // Check if lastRegistrationTime is not empty to avoid DateTimeParseException
        if (!lastRegistrationTime.isEmpty()) {
            String nextRegistrationTime = getNextRegistrationDate(lastRegistrationTime);

            // New model for registration table
            DefaultTableModel registrationModel = (DefaultTableModel) tblImmunizationRecord1.getModel();
            registrationModel.setRowCount(0); // Clear existing rows

            // Populate tblImmunizationRecord1 with registration info
            registrationModel.addRow(new Object[] {
                    lastRegistrationTime,
                    nextRegistrationTime,
                    "Not Registered" // default status
            });
        }
    }


}
